@model IEnumerable<PROJ1.Models.Question>

@{
    ViewData["Title"] = "Index";
}

<div class="sticky-header">
    <div class="container">
        <div class="row align-items-center justify-content-between">
            <div class="col-auto">
                <h2 class="mb-0">Score: <span id="score">0</span></h2>
                <input type="hidden" id="hiddenScore" value="0" />
            </div>
         
        </div>
    </div>
</div>

@foreach (var item in Model)
{
    <div class="container mt-5">
        <div class="d-flex justify-content-center row">
            <div class="col-md-10 col-lg-10">
                <div class="border rounded shadow-sm">
                    <div class="question bg-white p-3 border-bottom">
                        <div class="d-flex flex-column align-items-center question-title">
                            <h3 class="text-danger mb-3">Question</h3>
                            <h5 class="mt-1">@item.Question1</h5>
                        </div>
                        <div class="d-flex flex-column">
                            <button class="btn btn-outline-primary mb-2 text-left" type="button" data-value="@item.Option1" onclick="submitAnswer('@item.Answer', this)">@item.Option1</button>
                            <button class="btn btn-outline-primary mb-2 text-left" type="button" data-value="@item.Option2" onclick="submitAnswer('@item.Answer', this)">@item.Option2</button>
                            <button class="btn btn-outline-primary mb-2 text-left" type="button" data-value="@item.Option3" onclick="submitAnswer('@item.Answer', this)">@item.Option3</button>
                            <button class="btn btn-outline-primary mb-2 text-left" type="button" data-value="@item.Option4" onclick="submitAnswer('@item.Answer', this)">@item.Option4</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script>
    let score = parseInt(document.getElementById('hiddenScore').value);

    function submitAnswer(correctAnswer, button) {
        const buttons = button.parentElement.querySelectorAll('button');

        buttons.forEach(btn => {
            btn.disabled = true;
            if (btn.getAttribute('data-value') === correctAnswer) {
                btn.classList.add('btn-success'); // Green for correct
            } else {
                btn.classList.add('btn-danger'); // Red for wrong
            }
        });

        if (button.getAttribute('data-value') === correctAnswer) {
            score++;
            document.getElementById('score').innerText = score;
            document.getElementById('hiddenScore').value = score;
        }
    }
</script>

<style>
    .sticky-header {
        position: -webkit-sticky;
        position: sticky;
        top: 0;
        background-color: #f8f9fa;
        padding: 10px 0;
        z-index: 1000;
        border-bottom: 2px solid #007bff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
    }

        .sticky-header h2 {
            margin: 0;
            font-size: 1.5rem;
        }

        .sticky-header .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
            color: white;
            font-size: 1rem;
            padding: 10px 20px;
        }

    .border {
        border: 1px solid #ddd;
    }

    .rounded {
        border-radius: 0.25rem;
    }

    .shadow-sm {
        box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);
    }

    .btn-success {
        border: solid;
        background-color: green;
        border-color: green;
        color: white;
    }

    .btn-danger {
        border: solid;
        background-color: red;
        border-color: red;
        color: white;
    }
</style>
